{"version":3,"sources":["components/layout/Button.module.scss","components/layout/Modal.module.scss","containers/Layout.module.scss","components/layout/TextArea.module.scss","redux/actions/TableActions.js","constants/TableConstants.js","redux/selectors/TableSelectors.js","utils/TableUtil.js","components/Cell.js","components/DeleteCell.js","components/Row.js","components/Table.js","components/MarkdownCell.js","components/MarkdownRow.js","components/DelimiterCell.js","components/DelimiterRow.js","components/MarkdownTable.js","components/CellValueInput.js","components/layout/Button.js","components/toolbar/AlignButton.js","components/toolbar/AdjustWidthButton.js","components/toolbar/ToggleFullscreenButton.js","redux/selectors/SettingsSelectors.js","redux/actions/SettingsActions.js","components/layout/Modal.js","components/layout/TextArea.js","containers/ImportMarkdownModal.js","containers/MainEditor.js","components/toolbar/ImportMarkdownButton.js","containers/MainIntro.js","App.js","serviceWorker.js","redux/reducers/TableReducer.js","redux/reducers/SettingsReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","setActiveCell","activeRow","activeColumn","type","payload","importMarkdownTable","markdown","TABLE","State","rows","rowCount","columnCount","editingCell","maxColumnLength","getCellValue","rowIndex","columnIndex","options","state","cellValueFromState","value","table","getIn","removeLastBR","endsWith","slice","getRowCount","get","getColumnCount","isLastColumn","getMaxColumnLength","isExtraCell","undefined","getColumnAlignment","parseMarkdown","lines","match","columnsAlignment","forEach","line","i","parsedRow","split","length","j","lastRow","push","row","trimRow","trim","Math","max","delimiters","includes","getDimensions","immutableRows","size","first","calculateMaxLength","cell","HTML_ENTITIES","Cell","unescapedString","string","replace","key","RegExp","join","TableUtil","useSelector","TableSelectors","columnAlignment","cellSelected","dispatch","useDispatch","moveActiveCell","direction","TableActions","editableRef","useRef","current","el","focus","isHeader","showInsertIcons","className","classnames","onClick","ref","html","onChange","e","target","onFocus","onKeyDown","ctrlKey","metaKey","DeleteCell","isEditingRow","isEditingColumn","visible","opacity","useSpring","from","delay","deleteIcon","div","style","Row","deleteRow","columns","Array","fill","map","_","Table","MarkdownCell","lastColumn","adjustWidth","extraSpaces","cellLength","repeat","MarkdownRow","DelimiterCell","leftAlign","rightAlign","DelimiterRow","MarkdownTable","CellValueInput","disabled","Button","selected","children","icon","props","styleTypes","types","myType","styles","classes","button","enabled","text","ALIGNMENT_ICON","FaAlignLeft","FaAlignRight","FaAlignCenter","ALIGNMENT_TEXT","AlignButton","alignment","Icon","AdjustWidthButton","ToggleFullscreenButton","isFullscreen","settings","fullscreen","Modal","isOpen","toggle","useState","openSpring","setOpenSpring","modalRef","useEffect","onRest","config","precision","slide","top","role","tabIndex","background","modal","ModalHeader","header","closeButton","ModalBody","body","ModalFooter","footer","TextArea","textArea","ImportMarkdownModal","setValue","hideModal","importMarkdownModal","importMarkdownTextArea","placeholder","MainEditor","editorPaneRef","markdownPaneRef","clearActiveCell","console","log","window","getSelection","start","end","selection","anchorNode","parentNode","anchorOffset","focusOffset","tag","onMouseDown","ImportMarkdownButton","MainIntro","Layout","mainContent","landingPage","App","Boolean","location","hostname","initialState","Map","List","theme","importModalOpen","combineReducers","action","withMutations","set","setIn","maxLength","format","substring","insert","merge","deleteIn","filter","extraRowCount","moveToRow","fromJS","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d783e05d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1BIMs\",\"icon\":\"Button_icon__2k8j2\",\"enabled\":\"Button_enabled__RoEC-\",\"text\":\"Button_text__1WDVF\",\"type-flat\":\"Button_type-flat__1y7_4\",\"type-colorful\":\"Button_type-colorful__1gOti\",\"type-highlight\":\"Button_type-highlight__37_1G\",\"size-medium\":\"Button_size-medium__2XibO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3DAc5\",\"background\":\"Modal_background__3rBWc\",\"header\":\"Modal_header__3COhB\",\"closeButton\":\"Modal_closeButton__3lqa2\",\"body\":\"Modal_body__28NTM\",\"footer\":\"Modal_footer__2BC6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Layout_mainContent__3iGo0\",\"landingPage\":\"Layout_landingPage__LxwHh\",\"importMarkdownTextArea\":\"Layout_importMarkdownTextArea__2kp4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"TextArea_textArea__3UN11\"};","export const editCell = (rowIndex, columnIndex, value, editingCell) => ({\n  type    : 'TABLE_EDIT_CELL',\n  payload : { rowIndex, columnIndex, editingCell, value },\n});\n\nexport const editActiveCell = value => ({\n  type    : 'TABLE_EDIT_ACTIVE_CELL',\n  payload : { value }\n});\n\nexport const focusToolbarInput = () => ({\n  type: 'TABLE_FOCUS_TOOLBAR_INPUT',\n});\n\nexport const focusCellInput = () => ({\n  type: 'TABLE_FOCUS_CELL_INPUT',\n});\n\nexport const formatActiveCell = (start, end, tag) => ({\n  type    : 'TABLE_FORMAT_ACTIVE_CELL',\n  payload : { start, end, tag }\n});\n\nexport const setColumnAlignment = (columnIndex, alignment) => ({\n  type    : 'TABLE_SET_COLUMN_ALIGNMENT',\n  payload : { columnIndex, alignment }\n});\n\nexport const toggleAdjustWidth = () => ({\n  type: 'TABLE_TOGGLE_ADJUST_WIDTH',\n});\n\nexport const setActiveCell = (activeRow, activeColumn) => ({\n  type    : 'TABLE_SET_ACTIVE_CELL',\n  payload : { activeRow, activeColumn },\n});\n\nexport const clearActiveCell = () => ({\n  type: 'TABLE_CLEAR_ACTIVE_CELL',\n});\n\nexport const moveActiveCell = direction => ({\n  type    : 'TABLE_MOVE_ACTIVE_CELL',\n  payload : { direction },\n});\n\nexport const importMarkdownTable = markdown => ({\n  type    : 'TABLE_IMPORT_DATA',\n  payload : { markdown },\n});\n\nexport const deleteRow = rowIndex => ({\n  type    : 'TABLE_DELETE_ROW',\n  payload : { rowIndex },\n});\n\nexport const deleteColumn = columnIndex => ({\n  type    : 'TABLE_DELETE_COLUMN',\n  payload : { columnIndex },\n});\n\nexport const insertRow = rowIndex => ({\n  type    : 'TABLE_INSERT_ROW',\n  payload : { rowIndex },\n});\n\nexport const insertColumn = columnIndex => ({\n  type    : 'TABLE_INSERT_COLUMN',\n  payload : { columnIndex },\n});","const TABLE = {\n  State: {\n    rows            : 'rows',\n    rowCount        : 'rowCount',\n    columnCount     : 'columnCount',\n    editingCell     : 'editingCell',\n    activeRow       : 'activeRow',\n    activeColumn    : 'activeColumn',\n    maxColumnLength : 'maxColumnLength',\n  },\n};\n\n/*\nexport const TABLE_SAMPLE = \n`| Hea\\\\|di\\\\|ng 1 | Heading 2 | Heading 3 |\n| --- |:---:| ---:|\n| First \\\\| Row 1 | First **Row** 2 | First Row 3 |\n| Second Row 1 | Second Row 2 | Second Row 3 |\n| Anya | Maxim | Yuan |`;\n*/\n\nexport const TABLE_SAMPLE = \n`| Hello there | I'm a sample | Table!          |\n| ----------- |:------------:| ---------------:|\n| Type        | anything     | here.           |\n| Markdown    | is           | neat and cool!  |\n| Inner cell  | MD support   | is WIP \\\\| soon. |`;\n\nexport default TABLE;\n","import TABLE from \"../../constants/TableConstants\";\n\nexport const getEditingCellValue = options => function(state) {\n  return cellValueFromState(state, state.table.get(TABLE.State.activeRow), state.table.get(TABLE.State.activeColumn), options);\n}\n\nexport const getCellValue = (rowIndex, columnIndex, options) => function(state) {\n  return cellValueFromState(state, rowIndex, columnIndex, options);\n};\n\nfunction cellValueFromState(state, rowIndex, columnIndex, options = {}) {\n  let value = state.table.getIn([ TABLE.State.rows, rowIndex, columnIndex ]);\n\n  if (options.removeLastBR && value && value.endsWith('<br>')) {\n    value = value.slice(0, -4);\n  }\n\n  return value;\n}\n\nexport const getRowCount = () => function(state) {\n  return state.table.get(TABLE.State.rowCount);\n};\n\nexport const getColumnCount = () => function(state) {\n  return state.table.get(TABLE.State.columnCount);\n};\n\nexport const isLastColumn = columnIndex => function(state) {\n   return state.table.get(TABLE.State.columnCount) === columnIndex+1;\n};\n\nexport const isEditingCell = (rowIndex, columnIndex) => function(state) {\n  return state.table.get(TABLE.State.activeRow) === rowIndex && state.table.get(TABLE.State.activeColumn) === columnIndex && state.table.get(TABLE.State.editingCell)\n};\n\nexport const isCellSelected = (rowIndex, columnIndex) => function(state) {\n  return state.table.get(TABLE.State.activeRow) === rowIndex && state.table.get(TABLE.State.activeColumn) === columnIndex;\n}\n\nexport const isEditingRow = rowIndex => function(state) {\n  return rowIndex !== undefined && state.table.get(TABLE.State.activeRow) === rowIndex;\n};\n\nexport const getActiveColumn = () => function(state) {\n  return state.table.get('activeColumn');\n}\n\n//! This can be removed and just use getActiveColumn() === columnIndex\nconst WARNING_REMOVE_FOLLOWING_METHOD = '';\n\nexport const isEditingColumn = columnIndex => function(state) {\n  return columnIndex !== undefined && state.table.get(TABLE.State.activeColumn) === columnIndex;\n};\n\nexport const getAdjustWidth = () => function(state) {\n  return state.table.get('adjustWidth');\n};\n\nexport const getMaxColumnLength = rowIndex => function(state) {\n  return state.table.getIn([ TABLE.State.maxColumnLength, rowIndex ]) || 0;\n};\n\nexport const isExtraCell = (rowIndex, columnIndex = undefined) => function(state) {\n  return (\n    (rowIndex !== undefined && state.table.get(TABLE.State.rowCount) === rowIndex) ||\n    (columnIndex !== undefined && state.table.get(TABLE.State.columnCount) === columnIndex)\n  );\n};\n\nexport const getColumnAlignment = (columnIndex) => function(state) {\n  return state.table.getIn([ 'columnsAlignment', columnIndex ]);\n};\n","export function parseMarkdown(markdown) {\n\n  const lines = markdown.match(/.+/g);\n  const rows = [];\n  const maxColumnLength = [];\n  const columnsAlignment = [];\n\n  lines.forEach((line, i) => {\n \n    // Headers must always exists for most parsers, so we assume this line is the delimiter:\n    if (i === 1) {\n      const delimiters = line.split(/\\|/g);\n      \n      for (let row of delimiters) {\n        \n        if (row.trim().length > 0) {\n          if (row.split(\":\").length === 3) {\n            columnsAlignment.push('center')\n          }\n          else if (row.includes(\":---\")) {\n            columnsAlignment.push('left');\n          }\n          else if (row.includes(\"---:\")) {\n            columnsAlignment.push('right');\n          }\n          else {\n            columnsAlignment.push(null);\n          }\n        }\n        \n      }\n\n      return;\n    }\n\n    // ! Negative lookbehind would solve it in one line, but it's only supported by Chrome ;(\n    // const rows = line.split(/(?<!\\\\)\\|/g);\n    \n    // Instead, we have to do this:\n    const parsedRow = line.split(/\\|/g);\n    for (let i = 0; i < parsedRow.length-1; i++) {\n      \n      if (parsedRow[i].endsWith('\\\\')) {\n        for (let j = i + 1; j < parsedRow.length; j++) {\n          \n          parsedRow[i] += `|${parsedRow[j]}`;\n          const lastRow = parsedRow[j];\n          parsedRow[j] = '';\n\n          if (!lastRow.endsWith('\\\\')) {\n            break;\n          }\n        }\n      }\n    }\n\n    rows.push([]);\n\n    let rowIndex = 0;\n\n    parsedRow.forEach(row => {\n      const trimRow = row.trim();\n      \n      if (row.length > 0) {\n        rows[rows.length -1].push(trimRow);\n        maxColumnLength[rowIndex] = Math.max(trimRow.length, maxColumnLength[rowIndex] || 0);\n\n        rowIndex++;\n      }\n    })\n  });\n\n  return { rows, maxColumnLength, columnsAlignment };\n}\n\nexport function getDimensions(immutableRows) {\n  \n  let rowCount = 0;\n  let columnCount = 0;\n\n  rowCount = immutableRows.size;\n  columnCount = immutableRows.first().size;\n\n  return { rowCount, columnCount };\n}\n\nexport function calculateMaxLength(immutableRows, columnIndex) {\n\n  let maxColumnLength = 0;\n\n  immutableRows.forEach(row => {\n    let cell = row.get(columnIndex) || '';\n\n    if (cell.endsWith('<br>')) {\n      cell = cell.slice(0, -4);\n    }\n\n    maxColumnLength = Math.max(cell.length, maxColumnLength);\n  });\n\n  return maxColumnLength;\n}\n\nexport function unescapeMarkdown(markdown) {\n  let string = markdown || '';\n  \n  string = string.replace(/\\\\\\|/g, '|');\n\n  const lines = string.split('<br>');\n\n  for (let key in HTML_ENTITIES) {\n    for (let i = 0; i < lines.length; i++) {\n      lines[i] = lines[i].replace(new RegExp(HTML_ENTITIES[key], 'g'), key);\n    }\n  }\n\n  return lines.join('<br>');\n}\n\nconst HTML_ENTITIES = {\n  '&amp;'  : '&',\n  '&lt;'   : '<',\n  '&gt;'   : '>',\n  '&nbsp;' : ' ',\n  //'<b>'    : '**',\n  //'</b>'   : '**',\n};\n\nexport function htmlToMarkdown(html) {\n  let markdown = html || '';\n  \n  for (let key in HTML_ENTITIES) {\n    markdown = markdown.replace(new RegExp(key, 'g'), HTML_ENTITIES[key]);\n  }\n\n  markdown = markdown.replace(/\\|/g, '\\\\|');\n\n  return markdown;\n}","import React, { useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContentEditable from 'react-contenteditable';\nimport classnames from 'classnames';\n\nimport * as TableActions from '../redux/actions/TableActions';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\nimport * as TableUtil from '../utils/TableUtil';\nimport { TiPlusOutline } from 'react-icons/ti';\n\nexport default function Cell({ rowIndex, columnIndex }) {\n  const value = useSelector(TableSelectors.getCellValue(rowIndex, columnIndex));\n  const unescapedString = TableUtil.unescapeMarkdown(value);\n  \n  const editingCell     = useSelector(TableSelectors.isEditingCell(rowIndex, columnIndex));\n  const isExtraCell     = useSelector(TableSelectors.isExtraCell(rowIndex, columnIndex));\n  const columnAlignment = useSelector(TableSelectors.getColumnAlignment(columnIndex));\n  const cellSelected    = useSelector(TableSelectors.isCellSelected(rowIndex, columnIndex));\n\n  const dispatch         = useDispatch();\n  const editCell         = e => dispatch(TableActions.editCell(rowIndex, columnIndex, TableUtil.htmlToMarkdown(e.target.value), true));\n  const moveActiveCell  = direction => dispatch(TableActions.moveActiveCell(direction));\n  const setActiveCell   = () => dispatch(TableActions.setActiveCell(rowIndex, columnIndex));\n  const clearEditingCell = () => dispatch(TableActions.setActiveCell());\n  const insertRow        = () => dispatch(TableActions.insertRow(rowIndex));\n  const insertColumn     = () => dispatch(TableActions.insertColumn(columnIndex));\n\n  const editableRef = useRef();\n\n  if (editingCell && editableRef) {\n    editableRef.current.el.current.focus();\n  }\n\n  const handleKeyPress = e => {\n\n    // up and down should move between lines in one cell, so only\n    // allow movement between cells if the CTRL or CMD key is pressed:\n    if (!e.ctrlKey && !e.metaKey) {\n      return\n    }\n\n    switch(e.key) {\n      case 'ArrowDown':\n        moveActiveCell('down');\n        break;\n\n      case 'ArrowUp':\n        moveActiveCell('up');\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const isHeader = (rowIndex === 0);\n  const showInsertIcons = editingCell && editableRef && !isExtraCell && !isHeader;\n\n  return (\n    <td className={classnames({'extra': isExtraCell, 'table-head': isHeader})}>\n      { showInsertIcons &&\n        <>\n          <div className='insert-row'><TiPlusOutline className='insert-icon' onClick={insertRow} /></div>\n          <div className='insert-column'><TiPlusOutline className='insert-icon' onClick={insertColumn} /></div>\n        </>\n      }\n      <ContentEditable\n        ref={editableRef}\n        html={unescapedString || ''}\n        onChange={editCell}\n        onFocus={setActiveCell}\n        /*onBlur={clearEditingCell}*/\n        className={classnames('cell-value', { ['align-'+columnAlignment]: columnAlignment, 'cell-focused': cellSelected && !editingCell })}\n        onKeyDown={handleKeyPress}\n      />\n    </td>\n  )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSpring, animated } from 'react-spring';\n\nimport * as TableActions from '../redux/actions/TableActions';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\n\nimport { TiDelete } from 'react-icons/ti';\n\nexport default function DeleteCell({ rowIndex, columnIndex }) {\n\n  const isExtraCell = useSelector(TableSelectors.isExtraCell(rowIndex, columnIndex));\n  const isEditingRow = useSelector(TableSelectors.isEditingRow(rowIndex));\n  const isEditingColumn = useSelector(TableSelectors.isEditingColumn(columnIndex));\n  \n  const dispatch  = useDispatch();\n  const deleteRow = () => dispatch(TableActions.deleteRow(rowIndex));\n  const deleteColumn = () => dispatch(TableActions.deleteColumn(columnIndex));\n  const handleDelete = () => rowIndex !== undefined ? deleteRow() : deleteColumn();\n\n  const isHeader = (rowIndex === 0);\n  const visible = isEditingRow || isEditingColumn;\n\n  const opacity = useSpring({ opacity: visible ? 1 : 0, from: { opacity: 0 }, delay: 250 });\n\n  const deleteIcon = visible && (\n    <animated.div style={opacity}>\n      <TiDelete className='delete-icon' size={24} onClick={handleDelete} />\n    </animated.div>\n  );\n\n  return (\n    <td className='delete-cell'>{ !isHeader && !isExtraCell && deleteIcon }</td>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\nimport Cell from './Cell';\nimport DeleteCell from './DeleteCell';\n\nexport default function Row({ rowIndex, deleteRow }) {\n\n  const columnCount = useSelector(TableSelectors.getColumnCount());\n  const columns = Array(columnCount+1).fill(0);\n  \n  return (\n    <tr>\n      <DeleteCell rowIndex={rowIndex} />\n      { columns && columns.map((_, i) => (\n        deleteRow\n        ? <DeleteCell key={i} columnIndex={i} />\n        : <Cell key={i} rowIndex={rowIndex} columnIndex={i} />\n      ))}\n    </tr>\n  )\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\nimport Row from './Row';\n\nimport '../styles/Table.scss';\n\nexport default function Table() {\n\n  const rowCount = useSelector(TableSelectors.getRowCount());\n  const rows = Array(rowCount+1).fill(0);\n\n  return (\n    <table className='editable'>\n\n      <tbody>\n        <Row key='delete-row' deleteRow />\n        { rows && rows.map((_, i) => (\n          <Row key={i} rowIndex={i} />\n        ))}\n      </tbody>\n    </table>\n  )\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\n\nexport default function MarkdownCell({ rowIndex, columnIndex }) {\n\n  const value           = useSelector(TableSelectors.getCellValue(rowIndex, columnIndex, { removeLastBR: true }));\n  const lastColumn      = useSelector(TableSelectors.isLastColumn(columnIndex));\n  const adjustWidth     = useSelector(TableSelectors.getAdjustWidth());\n  let   maxColumnLength = useSelector(TableSelectors.getMaxColumnLength(columnIndex));\n\n  let extraSpaces = '';\n\n  if (adjustWidth) {\n\n    maxColumnLength = Math.max(maxColumnLength, 3);\n\n    const cellLength = (value && value.length) || 0;\n\n    if (maxColumnLength - cellLength > 0) {\n      extraSpaces = ' '.repeat(maxColumnLength - cellLength);\n    }\n  }\n\n  return (\n    <span>| {value}{extraSpaces} { lastColumn && '|'}</span>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\nimport MarkdownCell from './MarkdownCell';\n\nexport default function MarkdownRow({ rowIndex }) {\n\n  const columnCount = useSelector(TableSelectors.getColumnCount());\n  \n  const columns = Array(columnCount).fill().map((_, i) => (\n    <MarkdownCell key={i} rowIndex={rowIndex} columnIndex={i} />\n  ));\n\n  return (\n    <div>\n      { columns }\n    </div>\n  )\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\n\nexport default function DelimiterCell({ columnIndex }) {\n  \n  const lastColumn      = useSelector(TableSelectors.isLastColumn(columnIndex));\n  const maxColumnLength = useSelector(TableSelectors.getMaxColumnLength(columnIndex));\n  const columnAlignment = useSelector(TableSelectors.getColumnAlignment(columnIndex));\n  const adjustWidth     = useSelector(TableSelectors.getAdjustWidth());\n\n  let delimiters = '---';\n\n  if (adjustWidth && maxColumnLength > 3) {\n    delimiters = Array(maxColumnLength).fill('-').join('');\n  }\n\n  const leftAlign = (columnAlignment === 'left' || columnAlignment === 'center')? ':' : ' ';\n  const rightAlign = (columnAlignment === 'right' || columnAlignment === 'center')? ':' : ' ';\n\n  return (\n    <span>|{leftAlign}{delimiters}{rightAlign}{lastColumn && '|'}</span>\n  );\n\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DelimiterCell from './DelimiterCell';\n\nexport default function DelimiterRow() {\n\n  const WARNING_USE_TABLE_SELECTOR = '';\n  let columnCount = useSelector(state => state.table.get('columnCount'));\n\n  const columns = Array(columnCount).fill().map((_, i) => (\n    <DelimiterCell key={i} columnIndex={i} />\n  ));\n\n  return (\n    <div>\n      { columns }\n    </div>\n  )\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\n\nimport MarkdownRow from './MarkdownRow';\nimport DelimiterRow from './DelimiterRow';\n\nimport '../styles/Table.scss';\n\nexport default function MarkdownTable() {\n\n  const rowCount = useSelector(TableSelectors.getRowCount());\n  const rows = [];\n\n  for (let i = 0; i < rowCount; i++) {\n    rows.push(<MarkdownRow key={i} rowIndex={i} />);\n    (i === 0) && rows.push(<DelimiterRow key='delimiter' />);\n  }\n\n  return (\n    <div className='md-table'>\n      { rows }\n    </div>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as TableActions from '../redux/actions/TableActions';\nimport * as TableSelectors from '../redux/selectors/TableSelectors';\n\nexport default function CellValueInput() {\n\n  const dispatch = useDispatch();\n  const editCell = e => dispatch(TableActions.editActiveCell(e.target.value));\n  const onFocus  = () => dispatch(TableActions.focusToolbarInput());\n  \n  const value = useSelector(TableSelectors.getEditingCellValue({ removeLastBR: true }));\n\n  return (\n    <input className='cell-value-input' value={value || ''} onFocus={onFocus} onChange={editCell} disabled={!value} />\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport styles from './Button.module.scss';\n\nexport default function Button({ selected = false, children, icon, type, size, ...props }) {\n  \n  const styleTypes = [];\n  const types = type && type.split(' ');\n  types && types.forEach(myType =>  styleTypes.push(styles['type-' + myType]));\n\n  const classes = classnames(\n    styles.button,\n    styleTypes,\n    { [styles.enabled]: selected, [styles['size-'+size]]: size }\n  );\n\n  return (\n    <button className={classes} {...props} >\n      { icon && <span className={styles.icon}>{ icon }</span> }\n      { children && <div className={styles.text}>{ children }</div> }\n    </button>\n  )\n}\n\n/* prop types\n{\n\n  type:\n  size:\n  icon:\n  selected:\n\n}\n*/","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FaAlignCenter, FaAlignLeft, FaAlignRight } from 'react-icons/fa';\n\nimport Button from '../layout/Button';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as TableActions from '../../redux/actions/TableActions';\nimport * as TableSelectors from '../../redux/selectors/TableSelectors';\n\nconst ALIGNMENT_ICON = {\n  'left'   : FaAlignLeft,\n  'right'  : FaAlignRight,\n  'center' : FaAlignCenter,\n}\nconst ALIGNMENT_TEXT = {\n  'left'   : 'Left',\n  'right'  : 'Right',\n  'center' : 'Center',\n};\n\nexport default function AlignButton({ alignment }) {\n\n  const dispatch        = useDispatch();\n  const activeColumn    = useSelector(TableSelectors.getActiveColumn());\n  const columnAlignment = useSelector(TableSelectors.getColumnAlignment(activeColumn));\n  \n  const setColumnAlignment = () => {\n    dispatch(TableActions.setColumnAlignment(activeColumn, (alignment !== columnAlignment) ? alignment : null));\n  };\n\n  const Icon = ALIGNMENT_ICON[alignment];\n\n  return (\n    <Button onClick={setColumnAlignment} selected={columnAlignment === alignment} icon={<Icon />}>\n      {ALIGNMENT_TEXT[alignment]}\n    </Button>\n  );\n}\n\nAlignButton.propTypes = {\n  alignment: PropTypes.oneOf(['left', 'right', 'center']),\n};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as TableActions from '../../redux/actions/TableActions';\nimport * as TableSelectors from '../../redux/selectors/TableSelectors';\n\nimport Button from '../layout/Button';\nimport { TiArrowMinimise } from 'react-icons/ti';\n\nexport default function AdjustWidthButton() {\n  \n  const dispatch        = useDispatch();\n  const adjustWidth     = useSelector(TableSelectors.getAdjustWidth());\n    \n  const toggleAdjustWidth = () => {\n    dispatch(TableActions.toggleAdjustWidth());\n  };\n\n  const Icon = <TiArrowMinimise size='1.4em' />\n\n  return (\n    <Button onClick={toggleAdjustWidth} selected={!adjustWidth} icon={Icon}>Compact</Button>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as SettingsActions from '../../redux/actions/SettingsActions';\nimport * as SettingsSelectors from '../../redux/selectors/SettingsSelectors';\n\nimport Button from '../layout/Button';\nimport { FaExternalLinkAlt } from 'react-icons/fa';\n\nexport default function ToggleFullscreenButton({ ...props }) {\n\n  const dispatch = useDispatch();\n  const setFullscreen = () => dispatch(SettingsActions.setFullscreen(!isFullscreen));\n\n  const isFullscreen = useSelector(SettingsSelectors.isFullscreen());\n\n  const Icon = <FaExternalLinkAlt />;\n  const text = isFullscreen ? 'Exit Fullscreen' : 'Fullscreen Mode';\n\n  return (\n    <Button icon={Icon} onClick={setFullscreen} {...props}>\n      { text }\n    </Button>\n  )\n}\n","export const isFullscreen = () => function(state) {\n  return state.settings.get('fullscreen');\n};\n\nexport const isImportModalOpen = () => function(state) {\n  return state.settings.get('importModalOpen');\n};\n","export const setFullscreen = fullscreen => ({\n  type    : 'SETTINGS_SET_FULLSCREEN',\n  payload : { fullscreen },\n});\n\nexport const showImportModal = () => ({\n  type: 'SETTINGS_SHOW_IMPORT_MODAL',\n});\n\nexport const hideImportModal = () => ({\n  type: 'SETTINGS_HIDE_IMPORT_MODAL',\n});\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport classnames from 'classnames';\nimport { IoMdClose } from 'react-icons/io';\n\nimport styles from \"./Modal.module.scss\";\n\nexport function Modal({ isOpen, className, children, toggle }) {\n\n  const [ openSpring, setOpenSpring ] = useState(false);\n  const modalRef = useRef();\n\n  useEffect(() => { isOpen && setOpenSpring(isOpen) }, [ isOpen ]);\n\n  const toggleModal = (e) => {\n    if (toggle) {\n      if (e.target === modalRef.current) {\n        toggle();\n      }\n    }\n  }\n\n  // TODO --> try useTransition instead:\n\n  const opacity = useSpring({\n    opacity : isOpen? 1 : 0,\n    onRest  : () => !isOpen && setOpenSpring(false),\n    config: { precision: 0.5 },\n  });\n\n  const slide = useSpring({\n    top  : isOpen? '50%' : '55%',\n  });\n\n  return openSpring && (\n    <animated.div role=\"dialog\" tabIndex='-1' className={styles.background} style={opacity} onClick={toggleModal} ref={modalRef}>\n      <animated.div className={classnames(styles.modal, className)} style={slide}>\n        { children }\n      </animated.div>\n    </animated.div>\n  );\n}\n\nexport function ModalHeader({ className, children, toggle }) {\n  return (\n    <div className={classnames(styles.header, className)}>\n      { children }\n      <button className={styles.closeButton} onClick={toggle}><IoMdClose size={16} /></button>\n    </div>\n  );\n}\n\nexport function ModalBody({ className, children }) {\n  return (\n    <div className={classnames(styles.body, className)}>\n      { children }\n    </div>\n  );\n}\n\nexport function ModalFooter({ className, children }) {\n  return (\n    <div className={classnames(styles.footer, className)}>\n      { children }\n    </div>\n  );\n}","import React from 'react';\nimport classnames from 'classnames';\nimport styles from './TextArea.module.scss';\n\nexport default function TextArea({ className, ...props }) {\n  return (\n    <textarea className={classnames(styles.textArea, className)} {...props} />\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as TableActions from '../redux/actions/TableActions';\nimport * as SettingsActions from '../redux/actions/SettingsActions';\nimport * as SettingsSelectors from '../redux/selectors/SettingsSelectors';\n\nimport { Modal, ModalFooter, ModalBody, ModalHeader } from '../components/layout/Modal';\nimport TextArea from '../components/layout/TextArea';\nimport Button from '../components/layout/Button';\nimport styles from './Layout.module.scss';\n\nconst IMPORT_TEXT_PLACEHOLDER =\n`(Any line that doesn't start with | is ignored).\n`;\n\nexport default function ImportMarkdownModal() {\n\n  const [value, setValue] = useState('');\n  const isOpen = useSelector(SettingsSelectors.isImportModalOpen());\n\n  const dispatch = useDispatch();\n\n  const hideModal = () => dispatch(SettingsActions.hideImportModal());\n\n  const importClick = () => {\n    dispatch(TableActions.importMarkdownTable(value));\n    hideModal();\n  }\n\n  const changeValue = e => setValue(e.target.value);\n\n  return (\n    <Modal isOpen={isOpen} className={styles.importMarkdownModal} toggle={hideModal}>\n      <ModalHeader toggle={hideModal}>Import Markdown</ModalHeader>\n      <ModalBody>\n        <p>Paste or type the table markdown below.</p>\n        <TextArea className={styles.importMarkdownTextArea} rows={10} placeholder={IMPORT_TEXT_PLACEHOLDER} value={value} onChange={changeValue} />\n      </ModalBody>\n\n      <ModalFooter>\n        <Button type='colorful' size='medium' onClick={importClick}>Import</Button>\n        <Button size='medium' onClick={hideModal}>Cancel</Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classnames from 'classnames';\n\nimport * as TableActions from '../redux/actions/TableActions';\nimport { TABLE_SAMPLE } from '../constants/TableConstants';\nimport * as SettingsSelectors from '../redux/selectors/SettingsSelectors';\n\nimport Table from \"../components/Table\";\nimport MarkdownTable from \"../components/MarkdownTable\";\n\nimport '../styles/MainEditor.scss';\nimport CellValueInput from '../components/CellValueInput';\nimport AlignButton from '../components/toolbar/AlignButton';\nimport AdjustWidthButton from '../components/toolbar/AdjustWidthButton';\nimport ToggleFullscreenButton from '../components/toolbar/ToggleFullscreenButton';\nimport ImportMarkdownModal from './ImportMarkdownModal';\n\nexport default function MainEditor() {\n\n  const editorPaneRef = useRef();\n  const markdownPaneRef = useRef();\n\n  const dispatch = useDispatch();\n  useEffect(() => { dispatch(TableActions.importMarkdownTable(TABLE_SAMPLE)) }, [dispatch]);\n  \n  const clearActiveCell = e => {\n    \n    if (e.target === editorPaneRef.current || e.target === markdownPaneRef.current) {\n      dispatch(TableActions.clearActiveCell());\n    }\n  }\n\n  const AddCode = e => {\n    console.log(window.getSelection());\n\n    const selection = window.getSelection();\n\n    console.log(selection.anchorNode.parentNode.className);\n    \n    if (selection.anchorNode.parentNode.className === 'cell-value') {\n      console.log('CELL!');\n\n      dispatch(TableActions.formatActiveCell(selection.anchorOffset, selection.focusOffset, 'code'));\n    }\n  }\n\n  const isFullscreen = useSelector(SettingsSelectors.isFullscreen());\n\n  return (\n    <div className={classnames('main-editor', {'main-editor-windowed': !isFullscreen})}>\n\n      <div className='toolbar'>\n        \n        <div className='main-buttons'>\n          <CellValueInput />\n\n          <button onClick={AddCode}>Code</button>\n\n          <AlignButton alignment='left' />\n          <AlignButton alignment='center' />\n          <AlignButton alignment='right' />\n\n          <AdjustWidthButton />\n        </div>\n\n        <ToggleFullscreenButton type='flat' />\n        \n      </div>\n\n      <div className='pane-view'>\n        <div className='editor-pane' ref={editorPaneRef} onMouseDown={clearActiveCell}><Table /></div>\n        <div className='markdown-pane' ref={markdownPaneRef} onMouseDown={clearActiveCell}><MarkdownTable /></div>\n      </div>\n      \n      <ImportMarkdownModal />\n    </div>\n  );\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport * as SettingsActions from '../../redux/actions/SettingsActions';\n\nimport Button from '../layout/Button';\nimport { FaDownload } from 'react-icons/fa';\n\nexport default function ImportMarkdownButton({ ...props }) {\n\n  const dispatch = useDispatch();\n  const setFullscreen = () => dispatch(SettingsActions.showImportModal());\n\n  const Icon = <FaDownload />;\n\n  return (\n    <Button icon={Icon} onClick={setFullscreen} {...props}>\n      Import Markdown\n    </Button>\n  )\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport Layout from './Layout.module.scss';\nimport ToggleFullscreenButton from '../components/toolbar/ToggleFullscreenButton';\nimport ImportMarkdownButton from '../components/toolbar/ImportMarkdownButton';\n\nexport default function MainIntro() {\n\n  return (\n    <section className={classnames(Layout.mainContent, Layout.landingPage)}>\n      <h1>Markdown Tables Generator</h1>\n      <p>Easily generate Markdown tables without being an ASCII art professional. Built using React and Redux.</p>\n      <p>\n        <ToggleFullscreenButton type='colorful highlight' size='medium' />\n        <ImportMarkdownButton type='colorful highlight' size='medium' />\n        { /*\n          [ Load Sample Data ]\n        */}\n      </p>\n    </section>\n  );\n}\n","import React from 'react';\n\nimport MainEditor from './containers/MainEditor';\nimport MainIntro from './containers/MainIntro';\n\nfunction App() {\n\n  return (\n    <>\n      <MainIntro />\n      <MainEditor />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Map, List, fromJS } from \"immutable\";\nimport * as TableUtil from \"../../utils/TableUtil\";\n\nconst initialState = Map({\n\n  // Editing or highlighted row, column index:\n  activeRow    : null,\n  activeColumn : null,\n\n  // If the cell is being directly edited (true if cell, false if toolbar)\n  editingCell  : null,\n  \n  // Total number of rows and columns:\n  rowCount    : 3,\n  columnCount : 3,\n\n  // Extra whitespace on each column to adjust them vertically:\n  adjustWidth : true,\n\n  // Max string length per column index:\n  maxColumnLength : List(),\n\n  // Alignment for columns (null, 'left', 'center', 'right'):\n  columnsAlignment: List(),\n\n  // List of rows (column sized):\n  rows: List([\n    List(['','','']),\n    List(['','','']),\n    List(['','','']),\n  ]),\n});\n\nexport default function table(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n\n    case 'TABLE_EDIT_CELL':\n    case 'TABLE_EDIT_ACTIVE_CELL': {\n      const rowCount = state.get('rowCount');\n      const columnCount = state.get('columnCount');\n\n      let { rowIndex, columnIndex, editingCell, value } = payload;\n\n      if (rowIndex === undefined && columnIndex === undefined) {\n        rowIndex = state.get('activeRow');\n        columnIndex = state.get('activeColumn');\n      }\n\n      return state.withMutations(state => {\n\n        state.set('editingCell', editingCell);\n\n        if (rowIndex === rowCount) {\n          state.set('rowCount', rowIndex + 1);\n          state.set('rows', state.get('rows').push(List([])));\n        }\n  \n        if (columnIndex === columnCount) {\n          state.set('columnCount', columnCount + 1);\n        }\n\n        state.setIn(['rows', rowIndex, columnIndex], value);\n        const maxLength = TableUtil.calculateMaxLength(state.get('rows'), columnIndex);\n        state.setIn(['maxColumnLength', columnIndex], maxLength);\n      });\n    }\n\n    case 'TABLE_FOCUS_TOOLBAR_INPUT':\n      return state.set('editingCell', false);\n\n    case 'TABLE_FOCUS_CELL_INPUT': \n      return state.set('editingCell', true);\n\n    case 'TABLE_FORMAT_ACTIVE_CELL': {\n\n      const { start, end, tag } = action.payload;\n      const activeRow = state.get('activeRow');\n      const activeColumn = state.get('activeColumn');\n\n      let value = state.getIn([ 'rows', activeRow, activeColumn ]);\n\n      let format = [];\n\n      format.push(value.substring(0, start));\n      format.push(`<${tag}>${value.substring(start, end)}</${tag}>`);\n      format.push(value.substring(end));\n\n      return state.setIn(['rows', activeRow, activeColumn], format.join(''));\n    }\n\n    case 'TABLE_INSERT_ROW': {\n      const rowCount = state.get('rowCount');\n      let rows = state.get('rows');\n\n      rows = rows.insert(action.payload.rowIndex, List([]));\n\n      return state.merge({\n        rowCount: rowCount + 1,\n        rows,\n      });\n    }\n\n    case 'TABLE_INSERT_COLUMN': {\n      const { columnIndex } = action.payload;\n\n      const columnCount = state.get('columnCount') + 1;\n\n      let rows = state.get('rows');\n      rows = rows.map(row => row.insert(columnIndex, ''));\n      \n      const maxColumnLength = state.get('maxColumnLength').insert(columnIndex, TableUtil.calculateMaxLength(rows), columnIndex);\n      \n      return state.merge({\n        columnCount,\n        rows,\n        maxColumnLength,\n      });\n    }\n\n    case 'TABLE_DELETE_ROW': {\n      const rowCount = state.get('rowCount');\n\n      const { rowIndex } = payload;\n      \n      state = state.set('rowCount', rowCount - 1);\n      return state.deleteIn([ 'rows', rowIndex ]);\n    }\n\n    case 'TABLE_DELETE_COLUMN': {\n      const columnCount = state.get('columnCount');\n\n      const { columnIndex } = payload;\n      let rows = state.get('rows');\n\n      rows = rows.map(row => row.filter((_, i) => i !== columnIndex));\n\n      return state.merge({\n        rows,\n        columnCount: columnCount - 1,\n      });\n    }\n    \n    case 'TABLE_SET_COLUMN_ALIGNMENT': {\n      const { columnIndex, alignment } = payload;\n      return state.setIn([ 'columnsAlignment', columnIndex ], alignment);\n    }\n\n    case 'TABLE_TOGGLE_ADJUST_WIDTH': {\n      const adjustWidth = state.get('adjustWidth');\n      return state.set('adjustWidth', !adjustWidth);\n    }\n\n    case 'TABLE_CLEAR_ACTIVE_CELL':\n      return state.set({\n        activeRow    : null,\n        activeColumn : null,\n      });\n    \n    case 'TABLE_SET_ACTIVE_CELL': {\n      const { activeRow, activeColumn } = payload;\n      return state.merge({ activeRow, activeColumn, editingCell: true });\n    }\n\n    case 'TABLE_MOVE_ACTIVE_CELL': {\n      const activeRow    = state.get('activeRow');\n      const extraRowCount = state.get('rowCount') + 1;\n      let moveToRow = 0;\n      \n      switch (payload.direction) {\n        case 'down':\n          moveToRow = 1;\n          break;\n\n        case 'up':\n          moveToRow = -1;\n          break;\n\n        default:\n          return state;\n      }\n\n      return state.set('activeRow', (extraRowCount + activeRow + moveToRow) % extraRowCount);\n    }\n\n    case 'TABLE_IMPORT_DATA': {\n      const { rows, maxColumnLength, columnsAlignment } = TableUtil.parseMarkdown(action.payload.markdown);\n      const immutableRows = fromJS(rows);\n      \n      const { rowCount, columnCount } = TableUtil.getDimensions(immutableRows);\n\n      return state.merge({\n        rows             : immutableRows,\n        maxColumnLength  : fromJS(maxColumnLength),\n        columnsAlignment : fromJS(columnsAlignment),\n        rowCount,\n        columnCount,\n      });\n    }\n\n    default:\n      return state;\n  }\n}\n","import { Map } from \"immutable\";\n\nconst initialState = Map({\n\n  fullscreen      : false,\n  theme           : 'light',\n  importModalOpen : false,\n});\n\nexport default function settings(state = initialState, action) {\n\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'SETTINGS_SET_FULLSCREEN':\n      return state.set('fullscreen', payload.fullscreen);\n\n    case 'SETTINGS_HIDE_IMPORT_MODAL':\n      return state.set('importModalOpen', false);\n\n    case 'SETTINGS_SHOW_IMPORT_MODAL':\n      return state.set('importModalOpen', true);\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport table from './TableReducer';\nimport settings from './SettingsReducer';\n\nexport default combineReducers({\n  table,\n  settings,\n});\n","import { createStore } from \"redux\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}